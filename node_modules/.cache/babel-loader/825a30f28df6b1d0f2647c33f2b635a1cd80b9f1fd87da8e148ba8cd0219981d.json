{"ast":null,"code":"var _jsxFileName = \"/home/baba/Projects/watch-baba/src/pages/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MovieCard from '../components/MovieCard';\nimport { getPopularMovies, getPopularTvShows, getMovieGenres, getTvShowGenres } from '../services/tmdbApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 20px;\n`;\n_c = Grid;\nfunction Home() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [tvShows, setTvShows] = useState([]);\n  const [movieGenres, setMovieGenres] = useState([]);\n  const [tvGenres, setTvGenres] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [moviesRes, tvShowsRes, movieGenresRes, tvGenresRes] = await Promise.all([getPopularMovies(), getPopularTvShows(), getMovieGenres(), getTvShowGenres()]);\n        setMovies(moviesRes.data.results);\n        setTvShows(tvShowsRes.data.results);\n        setMovieGenres(movieGenresRes.data.genres);\n        setTvGenres(tvGenresRes.data.genres);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Popular Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(MovieCard, {\n        movie: movie,\n        genres: movieGenres\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Popular TV Shows\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: tvShows.map(tvShow => /*#__PURE__*/_jsxDEV(MovieCard, {\n        movie: {\n          ...tvShow,\n          title: tvShow.name,\n          release_date: tvShow.first_air_date,\n          media_type: 'tv'\n        },\n        genres: tvGenres\n      }, tvShow.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"M78oM30b4pdYrsy42DjY6DgClcE=\");\n_c2 = Home;\nexport default Home;\nvar _c, _c2;\n$RefreshReg$(_c, \"Grid\");\n$RefreshReg$(_c2, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","styled","MovieCard","getPopularMovies","getPopularTvShows","getMovieGenres","getTvShowGenres","jsxDEV","_jsxDEV","Grid","div","_c","Home","_s","movies","setMovies","tvShows","setTvShows","movieGenres","setMovieGenres","tvGenres","setTvGenres","fetchData","moviesRes","tvShowsRes","movieGenresRes","tvGenresRes","Promise","all","data","results","genres","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","movie","id","tvShow","title","name","release_date","first_air_date","media_type","_c2","$RefreshReg$"],"sources":["/home/baba/Projects/watch-baba/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MovieCard from '../components/MovieCard';\nimport { getPopularMovies, getPopularTvShows, getMovieGenres, getTvShowGenres } from '../services/tmdbApi';\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 20px;\n`;\n\nfunction Home() {\n  const [movies, setMovies] = useState([]);\n  const [tvShows, setTvShows] = useState([]);\n  const [movieGenres, setMovieGenres] = useState([]);\n  const [tvGenres, setTvGenres] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [moviesRes, tvShowsRes, movieGenresRes, tvGenresRes] = await Promise.all([\n          getPopularMovies(),\n          getPopularTvShows(),\n          getMovieGenres(),\n          getTvShowGenres()\n        ]);\n\n        setMovies(moviesRes.data.results);\n        setTvShows(tvShowsRes.data.results);\n        setMovieGenres(movieGenresRes.data.genres);\n        setTvGenres(tvGenresRes.data.genres);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      <h2>Popular Movies</h2>\n      <Grid>\n        {movies.map((movie) => (\n          <MovieCard key={movie.id} movie={movie} genres={movieGenres} />\n        ))}\n      </Grid>\n\n      <h2>Popular TV Shows</h2>\n      <Grid>\n        {tvShows.map((tvShow) => (\n          <MovieCard\n            key={tvShow.id}\n            movie={{\n              ...tvShow,\n              title: tvShow.name,\n              release_date: tvShow.first_air_date,\n              media_type: 'tv'\n            }}\n            genres={tvGenres}\n          />\n        ))}\n      </Grid>\n    </div>\n  );\n}\n\nexport default Home;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}