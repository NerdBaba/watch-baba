{"ast":null,"code":"var _jsxFileName = \"/home/baba/Projects/watch-baba/src/components/VideoPlayer.js\";\nimport React from 'react';\nimport styled from 'styled-components';\n\n// Container to maintain the aspect ratio (16:9) for the video player\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerContainer = styled.div`\n  position: relative;\n  padding-bottom: 56.25%; /* 16:9 aspect ratio */\n  height: 0;\n  overflow: hidden;\n`;\n\n// Iframe for the embedded video player\n_c = PlayerContainer;\nconst Iframe = styled.iframe`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border: none;\n`;\n\n// Blocker overlay to capture clicks and prevent interaction with unwanted elements in the iframe\n_c2 = Iframe;\nconst Blocker = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 10; /* Ensure it's above the iframe */\n  pointer-events: none; /* Allow clicks to pass through to the iframe */\n`;\n_c3 = Blocker;\nfunction VideoPlayer({\n  imdbId,\n  season,\n  episode\n}) {\n  // Construct the embed URL based on whether it's a movie or a TV show\n  let embedUrl = '';\n  if (season && episode) {\n    embedUrl = `https://vidsrc.xyz/embed/tv/${imdbId}/${season}-${episode}`;\n  } else {\n    embedUrl = `https://vidsrc.xyz/embed/movie/${imdbId}`;\n  }\n  return /*#__PURE__*/_jsxDEV(PlayerContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Iframe, {\n      src: embedUrl,\n      allowFullScreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Blocker, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_c4 = VideoPlayer;\nexport default VideoPlayer;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"PlayerContainer\");\n$RefreshReg$(_c2, \"Iframe\");\n$RefreshReg$(_c3, \"Blocker\");\n$RefreshReg$(_c4, \"VideoPlayer\");","map":{"version":3,"names":["React","styled","jsxDEV","_jsxDEV","PlayerContainer","div","_c","Iframe","iframe","_c2","Blocker","_c3","VideoPlayer","imdbId","season","episode","embedUrl","children","src","allowFullScreen","fileName","_jsxFileName","lineNumber","columnNumber","_c4","$RefreshReg$"],"sources":["/home/baba/Projects/watch-baba/src/components/VideoPlayer.js"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\n// Container to maintain the aspect ratio (16:9) for the video player\nconst PlayerContainer = styled.div`\n  position: relative;\n  padding-bottom: 56.25%; /* 16:9 aspect ratio */\n  height: 0;\n  overflow: hidden;\n`;\n\n// Iframe for the embedded video player\nconst Iframe = styled.iframe`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border: none;\n`;\n\n// Blocker overlay to capture clicks and prevent interaction with unwanted elements in the iframe\nconst Blocker = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 10; /* Ensure it's above the iframe */\n  pointer-events: none; /* Allow clicks to pass through to the iframe */\n`;\n\nfunction VideoPlayer({ imdbId, season, episode }) {\n  // Construct the embed URL based on whether it's a movie or a TV show\n  let embedUrl = '';\n\n  if (season && episode) {\n    embedUrl = `https://vidsrc.xyz/embed/tv/${imdbId}/${season}-${episode}`;\n  } else {\n    embedUrl = `https://vidsrc.xyz/embed/movie/${imdbId}`;\n  }\n\n  return (\n    <PlayerContainer>\n      {/* Embed the video using an iframe */}\n      <Iframe src={embedUrl} allowFullScreen />\n      {/* Single invisible blocker overlay to prevent interaction with popups or ads */}\n      <Blocker />\n    </PlayerContainer>\n  );\n}\n\nexport default VideoPlayer;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;;AAEtC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,GAAGH,MAAM,CAACI,GAAG;AAClC;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAAC,EAAA,GAPMF,eAAe;AAQrB,MAAMG,MAAM,GAAGN,MAAM,CAACO,MAAM;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAAC,GAAA,GATMF,MAAM;AAUZ,MAAMG,OAAO,GAAGT,MAAM,CAACI,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACM,GAAA,GARID,OAAO;AAUb,SAASE,WAAWA,CAAC;EAAEC,MAAM;EAAEC,MAAM;EAAEC;AAAQ,CAAC,EAAE;EAChD;EACA,IAAIC,QAAQ,GAAG,EAAE;EAEjB,IAAIF,MAAM,IAAIC,OAAO,EAAE;IACrBC,QAAQ,GAAG,+BAA+BH,MAAM,IAAIC,MAAM,IAAIC,OAAO,EAAE;EACzE,CAAC,MAAM;IACLC,QAAQ,GAAG,kCAAkCH,MAAM,EAAE;EACvD;EAEA,oBACEV,OAAA,CAACC,eAAe;IAAAa,QAAA,gBAEdd,OAAA,CAACI,MAAM;MAACW,GAAG,EAAEF,QAAS;MAACG,eAAe;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEzCpB,OAAA,CAACO,OAAO;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEtB;AAACC,GAAA,GAlBQZ,WAAW;AAoBpB,eAAeA,WAAW;AAAC,IAAAN,EAAA,EAAAG,GAAA,EAAAE,GAAA,EAAAa,GAAA;AAAAC,YAAA,CAAAnB,EAAA;AAAAmB,YAAA,CAAAhB,GAAA;AAAAgB,YAAA,CAAAd,GAAA;AAAAc,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}