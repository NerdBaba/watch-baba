{"ast":null,"code":"import React,{useState,useEffect}from'react';import styled from'styled-components';import MovieCard from'../components/MovieCard';import{getPopularMovies,getPopularTvShows,getMovieGenres,getTvShowGenres}from'../services/tmdbApi';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Grid=styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 20px;\n`;function Home(){const[movies,setMovies]=useState([]);const[tvShows,setTvShows]=useState([]);const[movieGenres,setMovieGenres]=useState([]);const[tvGenres,setTvGenres]=useState([]);useEffect(()=>{const fetchData=async()=>{try{const[moviesRes,tvShowsRes,movieGenresRes,tvGenresRes]=await Promise.all([getPopularMovies(),getPopularTvShows(),getMovieGenres(),getTvShowGenres()]);setMovies(moviesRes.data.results);setTvShows(tvShowsRes.data.results);setMovieGenres(movieGenresRes.data.genres);setTvGenres(tvGenresRes.data.genres);}catch(error){console.error('Error fetching data:',error);}};fetchData();},[]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Popular Movies\"}),/*#__PURE__*/_jsx(Grid,{children:movies.map(movie=>/*#__PURE__*/_jsx(MovieCard,{movie:movie,genres:movieGenres},movie.id))}),/*#__PURE__*/_jsx(\"h2\",{children:\"Popular TV Shows\"}),/*#__PURE__*/_jsx(Grid,{children:tvShows.map(tvShow=>/*#__PURE__*/_jsx(MovieCard,{movie:{...tvShow,title:tvShow.name,release_date:tvShow.first_air_date,media_type:'tv'},genres:tvGenres},tvShow.id))})]});}export default Home;","map":{"version":3,"names":["React","useState","useEffect","styled","MovieCard","getPopularMovies","getPopularTvShows","getMovieGenres","getTvShowGenres","jsx","_jsx","jsxs","_jsxs","Grid","div","Home","movies","setMovies","tvShows","setTvShows","movieGenres","setMovieGenres","tvGenres","setTvGenres","fetchData","moviesRes","tvShowsRes","movieGenresRes","tvGenresRes","Promise","all","data","results","genres","error","console","children","map","movie","id","tvShow","title","name","release_date","first_air_date","media_type"],"sources":["/home/baba/Projects/watch-baba/src/pages/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MovieCard from '../components/MovieCard';\nimport { getPopularMovies, getPopularTvShows, getMovieGenres, getTvShowGenres } from '../services/tmdbApi';\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 20px;\n`;\n\nfunction Home() {\n  const [movies, setMovies] = useState([]);\n  const [tvShows, setTvShows] = useState([]);\n  const [movieGenres, setMovieGenres] = useState([]);\n  const [tvGenres, setTvGenres] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [moviesRes, tvShowsRes, movieGenresRes, tvGenresRes] = await Promise.all([\n          getPopularMovies(),\n          getPopularTvShows(),\n          getMovieGenres(),\n          getTvShowGenres()\n        ]);\n\n        setMovies(moviesRes.data.results);\n        setTvShows(tvShowsRes.data.results);\n        setMovieGenres(movieGenresRes.data.genres);\n        setTvGenres(tvGenresRes.data.genres);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      <h2>Popular Movies</h2>\n      <Grid>\n        {movies.map((movie) => (\n          <MovieCard key={movie.id} movie={movie} genres={movieGenres} />\n        ))}\n      </Grid>\n\n      <h2>Popular TV Shows</h2>\n      <Grid>\n        {tvShows.map((tvShow) => (\n          <MovieCard\n            key={tvShow.id}\n            movie={{\n              ...tvShow,\n              title: tvShow.name,\n              release_date: tvShow.first_air_date,\n              media_type: 'tv'\n            }}\n            genres={tvGenres}\n          />\n        ))}\n      </Grid>\n    </div>\n  );\n}\n\nexport default Home;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CACtC,MAAO,CAAAC,SAAS,KAAM,yBAAyB,CAC/C,OAASC,gBAAgB,CAAEC,iBAAiB,CAAEC,cAAc,CAAEC,eAAe,KAAQ,qBAAqB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE3G,KAAM,CAAAC,IAAI,CAAGV,MAAM,CAACW,GAAG;AACvB;AACA;AACA;AACA,CAAC,CAED,QAAS,CAAAC,IAAIA,CAAA,CAAG,CACd,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGhB,QAAQ,CAAC,EAAE,CAAC,CACxC,KAAM,CAACiB,OAAO,CAAEC,UAAU,CAAC,CAAGlB,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACmB,WAAW,CAAEC,cAAc,CAAC,CAAGpB,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACqB,QAAQ,CAAEC,WAAW,CAAC,CAAGtB,QAAQ,CAAC,EAAE,CAAC,CAE5CC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAsB,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACF,KAAM,CAACC,SAAS,CAAEC,UAAU,CAAEC,cAAc,CAAEC,WAAW,CAAC,CAAG,KAAM,CAAAC,OAAO,CAACC,GAAG,CAAC,CAC7EzB,gBAAgB,CAAC,CAAC,CAClBC,iBAAiB,CAAC,CAAC,CACnBC,cAAc,CAAC,CAAC,CAChBC,eAAe,CAAC,CAAC,CAClB,CAAC,CAEFS,SAAS,CAACQ,SAAS,CAACM,IAAI,CAACC,OAAO,CAAC,CACjCb,UAAU,CAACO,UAAU,CAACK,IAAI,CAACC,OAAO,CAAC,CACnCX,cAAc,CAACM,cAAc,CAACI,IAAI,CAACE,MAAM,CAAC,CAC1CV,WAAW,CAACK,WAAW,CAACG,IAAI,CAACE,MAAM,CAAC,CACtC,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC9C,CACF,CAAC,CAEDV,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEZ,KAAA,QAAAwB,QAAA,eACE1B,IAAA,OAAA0B,QAAA,CAAI,gBAAc,CAAI,CAAC,cACvB1B,IAAA,CAACG,IAAI,EAAAuB,QAAA,CACFpB,MAAM,CAACqB,GAAG,CAAEC,KAAK,eAChB5B,IAAA,CAACN,SAAS,EAAgBkC,KAAK,CAAEA,KAAM,CAACL,MAAM,CAAEb,WAAY,EAA5CkB,KAAK,CAACC,EAAwC,CAC/D,CAAC,CACE,CAAC,cAEP7B,IAAA,OAAA0B,QAAA,CAAI,kBAAgB,CAAI,CAAC,cACzB1B,IAAA,CAACG,IAAI,EAAAuB,QAAA,CACFlB,OAAO,CAACmB,GAAG,CAAEG,MAAM,eAClB9B,IAAA,CAACN,SAAS,EAERkC,KAAK,CAAE,CACL,GAAGE,MAAM,CACTC,KAAK,CAAED,MAAM,CAACE,IAAI,CAClBC,YAAY,CAAEH,MAAM,CAACI,cAAc,CACnCC,UAAU,CAAE,IACd,CAAE,CACFZ,MAAM,CAAEX,QAAS,EAPZkB,MAAM,CAACD,EAQb,CACF,CAAC,CACE,CAAC,EACJ,CAAC,CAEV,CAEA,cAAe,CAAAxB,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}