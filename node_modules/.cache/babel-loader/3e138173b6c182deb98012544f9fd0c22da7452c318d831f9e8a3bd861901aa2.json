{"ast":null,"code":"import React,{useState,useEffect}from'react';import styled from'styled-components';import MovieCard from'../components/MovieCard';import Pagination from'../components/Pagination';import GenreFilter from'../components/GenreFilter';import{getPopularTvShows,getTvShowGenres,discoverTvShows}from'../services/tmdbApi';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Grid=styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 20px;\n`;function TvShows(){const[tvShows,setTvShows]=useState([]);const[genres,setGenres]=useState([]);const[selectedGenre,setSelectedGenre]=useState('');const[currentPage,setCurrentPage]=useState(1);const[totalPages,setTotalPages]=useState(0);useEffect(()=>{const fetchTvShows=async()=>{try{let response;if(selectedGenre){response=await discoverTvShows(currentPage,selectedGenre);}else{response=await getPopularTvShows(currentPage);}setTvShows(response.data.results);setTotalPages(response.data.total_pages);}catch(error){console.error('Error fetching TV shows:',error);}};fetchTvShows();},[currentPage,selectedGenre]);useEffect(()=>{const fetchGenres=async()=>{try{const response=await getTvShowGenres();setGenres(response.data.genres);}catch(error){console.error('Error fetching TV show genres:',error);}};fetchGenres();},[]);const handlePageChange=pageNumber=>{setCurrentPage(pageNumber);window.scrollTo(0,0);};const handleGenreSelect=genreId=>{setSelectedGenre(genreId);setCurrentPage(1);};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Popular TV Shows\"}),/*#__PURE__*/_jsx(GenreFilter,{genres:genres,selectedGenre:selectedGenre,onGenreSelect:handleGenreSelect}),/*#__PURE__*/_jsx(Grid,{children:tvShows.map(show=>/*#__PURE__*/_jsx(MovieCard,{movie:{...show,title:show.name,release_date:show.first_air_date,media_type:'tv'},genres:genres},show.id))}),/*#__PURE__*/_jsx(Pagination,{currentPage:currentPage,totalPages:totalPages,onPageChange:handlePageChange})]});}export default TvShows;","map":{"version":3,"names":["React","useState","useEffect","styled","MovieCard","Pagination","GenreFilter","getPopularTvShows","getTvShowGenres","discoverTvShows","jsx","_jsx","jsxs","_jsxs","Grid","div","TvShows","tvShows","setTvShows","genres","setGenres","selectedGenre","setSelectedGenre","currentPage","setCurrentPage","totalPages","setTotalPages","fetchTvShows","response","data","results","total_pages","error","console","fetchGenres","handlePageChange","pageNumber","window","scrollTo","handleGenreSelect","genreId","children","onGenreSelect","map","show","movie","title","name","release_date","first_air_date","media_type","id","onPageChange"],"sources":["/home/baba/Projects/watch-baba/src/pages/TvShows.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MovieCard from '../components/MovieCard';\nimport Pagination from '../components/Pagination';\nimport GenreFilter from '../components/GenreFilter';\nimport { getPopularTvShows, getTvShowGenres, discoverTvShows } from '../services/tmdbApi';\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 20px;\n`;\n\nfunction TvShows() {\n  const [tvShows, setTvShows] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n\n  useEffect(() => {\n    const fetchTvShows = async () => {\n      try {\n        let response;\n        if (selectedGenre) {\n          response = await discoverTvShows(currentPage, selectedGenre);\n        } else {\n          response = await getPopularTvShows(currentPage);\n        }\n        setTvShows(response.data.results);\n        setTotalPages(response.data.total_pages);\n      } catch (error) {\n        console.error('Error fetching TV shows:', error);\n      }\n    };\n\n    fetchTvShows();\n  }, [currentPage, selectedGenre]);\n\n  useEffect(() => {\n    const fetchGenres = async () => {\n      try {\n        const response = await getTvShowGenres();\n        setGenres(response.data.genres);\n      } catch (error) {\n        console.error('Error fetching TV show genres:', error);\n      }\n    };\n\n    fetchGenres();\n  }, []);\n\n  const handlePageChange = (pageNumber) => {\n    setCurrentPage(pageNumber);\n    window.scrollTo(0, 0);\n  };\n\n  const handleGenreSelect = (genreId) => {\n    setSelectedGenre(genreId);\n    setCurrentPage(1);\n  };\n\n  return (\n    <div>\n      <h2>Popular TV Shows</h2>\n      <GenreFilter\n        genres={genres}\n        selectedGenre={selectedGenre}\n        onGenreSelect={handleGenreSelect}\n      />\n      <Grid>\n        {tvShows.map((show) => (\n          <MovieCard\n            key={show.id}\n            movie={{\n              ...show,\n              title: show.name,\n              release_date: show.first_air_date,\n              media_type: 'tv'\n            }}\n            genres={genres}\n          />\n        ))}\n      </Grid>\n      <Pagination\n        currentPage={currentPage}\n        totalPages={totalPages}\n        onPageChange={handlePageChange}\n      />\n    </div>\n  );\n}\n\nexport default TvShows;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}