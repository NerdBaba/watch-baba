{"ast":null,"code":"var _jsxFileName = \"/home/baba/Projects/watch-baba/src/pages/Movies.js\",\n  _s = $RefreshSig$();\n// pages/Movies.js\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MovieCard from '../components/MovieCard';\nimport Pagination from '../components/Pagination';\nimport GenreFilter from '../components/GenreFilter';\nimport { getPopularMovies, getMovieGenres } from '../services/tmdbApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 20px;\n`;\n_c = Grid;\nfunction Movies() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [movieGenres, setMovieGenres] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  useEffect(() => {\n    getPopularMovies(currentPage, selectedGenre).then(response => {\n      setMovies(response.data.results);\n      setTotalPages(response.data.total_pages);\n    });\n  }, [currentPage, selectedGenre]);\n  useEffect(() => {\n    getMovieGenres().then(response => {\n      setGenres(response.data.genres);\n      setMovieGenres(response.data.genres);\n    });\n  }, []);\n  const handlePageChange = pageNumber => {\n    setCurrentPage(pageNumber);\n    window.scrollTo(0, 0);\n  };\n  const handleGenreSelect = genreId => {\n    setSelectedGenre(genreId);\n    setCurrentPage(1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Popular Movies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GenreFilter, {\n      genres: genres,\n      selectedGenre: selectedGenre,\n      onGenreSelect: handleGenreSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(MovieCard, {\n        movie: movie\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      totalPages: totalPages,\n      onPageChange: handlePageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(Movies, \"uaVqA9B/RgT4bH9g315PgqdZOcY=\");\n_c2 = Movies;\nexport default Movies;\nvar _c, _c2;\n$RefreshReg$(_c, \"Grid\");\n$RefreshReg$(_c2, \"Movies\");","map":{"version":3,"names":["React","useState","useEffect","styled","MovieCard","Pagination","GenreFilter","getPopularMovies","getMovieGenres","jsxDEV","_jsxDEV","Grid","div","_c","Movies","_s","movies","setMovies","genres","setGenres","selectedGenre","setSelectedGenre","movieGenres","setMovieGenres","currentPage","setCurrentPage","totalPages","setTotalPages","then","response","data","results","total_pages","handlePageChange","pageNumber","window","scrollTo","handleGenreSelect","genreId","children","fileName","_jsxFileName","lineNumber","columnNumber","onGenreSelect","map","movie","id","onPageChange","_c2","$RefreshReg$"],"sources":["/home/baba/Projects/watch-baba/src/pages/Movies.js"],"sourcesContent":["// pages/Movies.js\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MovieCard from '../components/MovieCard';\nimport Pagination from '../components/Pagination';\nimport GenreFilter from '../components/GenreFilter';\nimport { getPopularMovies, getMovieGenres } from '../services/tmdbApi';\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 20px;\n`;\n\nfunction Movies() {\n  const [movies, setMovies] = useState([]);\n  const [genres, setGenres] = useState([]);\n  const [selectedGenre, setSelectedGenre] = useState('');\n  const [movieGenres, setMovieGenres] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n\n  useEffect(() => {\n    getPopularMovies(currentPage, selectedGenre).then((response) => {\n      setMovies(response.data.results);\n      setTotalPages(response.data.total_pages);\n    });\n  }, [currentPage, selectedGenre]);\n\n  useEffect(() => {\n    getMovieGenres().then((response) => {\n      setGenres(response.data.genres);\n      setMovieGenres(response.data.genres);\n    });\n  }, []);\n\n  const handlePageChange = (pageNumber) => {\n    setCurrentPage(pageNumber);\n    window.scrollTo(0, 0);\n  };\n\n  const handleGenreSelect = (genreId) => {\n    setSelectedGenre(genreId);\n    setCurrentPage(1);\n  };\n\n  return (\n    <div>\n      <h2>Popular Movies</h2>\n      <GenreFilter\n        genres={genres}\n        selectedGenre={selectedGenre}\n        onGenreSelect={handleGenreSelect}\n      />\n      <Grid>\n        {movies.map((movie) => (\n          <MovieCard key={movie.id} movie={movie} />\n        ))}\n      </Grid>\n      <Pagination\n        currentPage={currentPage}\n        totalPages={totalPages}\n        onPageChange={handlePageChange}\n      />\n    </div>\n  );\n}\n\nexport default Movies;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}